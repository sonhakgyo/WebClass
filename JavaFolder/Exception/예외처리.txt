예외처리(Exception)
    에러와 예외는 다른 말이다. 둘의 구분선은 애매하다.
        에러 : 프로그램 코드에 의해서 수습될 수 없는 심각한 오류
        예외 : 프로그램 코드에 의해서 수습될 수 있는 다소 미약한, 덜 심각한 오류

    출처 : sksggg123
    프로그램은 실행 준비 혹 실행 중에 오류가 발생할 수 있다. 이를 발생시점에 따라 컴파일
    에러, 런타임 에러, 논리적 에러로 분류할 수 있다. 컴파일 에러는 말 그대로 컴파일할 때
    발생하는 에러이며 프로그램 실행 시 발생하는 에러는 런타임 에러다. 그리고 논리적 에러는
    컴파일도 잘 되고 프로그램 실행도 잘 되지만 의도한 것과 다르게 동작하는 것을 말한다.
    예를 들면 어떠한 int를 매개변수로 받는 로직이 있다고 가정하자. 해당 매개변수가 양수로
    들어와야 하지만 음수로 들어오게 되어 로직상 에러가 발생한다던가 의도한 대로 수행이
    되지 않을 때를 말한다. 
        컴파일 에러 - 컴파일 시 발생하는 에러
        런타임 에러 - 실행 시 발생하는 에러 
        논리적 에러 - 실행은 되지만 의도와 다르게 동작하는 것 

    컴파일 에러는 기본적으로 잘못된 구문이나 자료형 체크 등의 기본적인 검사를 수행한다.
    java에서 소스코드의 기본적인 사항을 컴파일 시 모두 걸러줄 수도 있지만 실행 도중 발생할
    수 있는 잠재적인 오류(런타임 에러)는 잡을 수 없다. 런타임 에러를 방지하기 위해서는 
    프로그램의 실행 도중 발생할 수 있는 모든 경우의 수를 고려하여 대비하는 것이 필요하다.

    자바에서는 실행 시 발생할 수 있는 런타임 에러를 '에러'와 '예외' 두 가지로 구분하였다.

예외 발생시키기
    키워드 thorw를 사용해서 개발자가 고의로 예외를 발생시킬 수 있다.
        Exception e = new Exception("예외 발생");
        throw e;

예외처리 방법 
    (1) 방법.
    try {
            오류가 발생할 수 있는 문장
    } catch (예외이름 객체명) {          
            오류 발생 시 실행할 문장
    }

    (2) 방법.
    try { 
            오류가 발생할 수 있는 문장 
    } catch(예외이름1 객체명1) {
            오류 발생 시 실행할 문장
    } catch(예외이름2 객체명2) {
            오류 발생 시 실행할 문장
    }
    
    (3) 방법.
    try {
            오류가 발생할 수 있는 문장             
    } catch (예외이름 객체명) {
            오류 발생 시 실행할 문장
    } finally {
            예외 발생여부에 상관없이 무조건 실행할 문장
    }

    (4) 방법
    try {
            오류가 발생할 수 있는 문장
    } catch (예외이름1 | 예외이름2 객체명) {
            예외이름 둘 중 하나라도 발생 시 실행할 문장
    }

Checked와 Unchecked Exception 
    Checked Exception은 컴파일 단계에서 확인 가능한 예외이다. 다른 말로는 "Compiletime
    Exception"이라고 한다. Checked Exception은 try/catch로 감싸거나 throw로 던지는 처리
    를 반드시 해주어야 한다. 예외처리를 컴파일러가 강제로 하는 것이다.

    Unchecked Exception은 컴파일 단계에서 확인 불가능하며 프로그램의 로직 실행 중 발생한다.
    다른 말로는 "Runtime Exception"이라고 한다. Unchecked Exception은 명시적인 예외처리
    를 하지 않아도 된다. 미리 예측하지 못했던 상황에서 발생하는 예외가 아니기 때문에 굳이
    로직으로 처리를 할 필요가 없도록 만들어져 있다.

    참고로 Error와 그 자손도 Unchecked Exception이다. try/catch로 처리할 수 없기 때문이다.

    













