MVC 설계방식 Model View Controller
        어플리케이션을 구성하는 패턴 중 하나(비즈니스 로직)

Model      : 데이터에 관한 처리(Java beans), 데이터베이스, DAO DTO
View       : 사용자에게 노출되는 화면
Controller : 데이터(Model)와 화면 요소(View)를 연결, 관리한다.

MVC1 : Controller를 제외한 설계방식
        장점 : 구현이 쉽다.
        단점 : 유지보수가 어렵다. 즉, 오래 가기 힘들다.
        결론 : 작은 어플리케이션 개발에 용이하다.
        과정 
            loginView(ID, PW) ㅡ loginLogic ㅡ DAO ㅡ select ㅡ loginResultView


MVC2 : 모든 요소가 Controller를 통해 제어되는 방식
        장점 : 유지보수가 쉽다.
        단점 : 구현이 어렵다
        결론 : 대규모 어플리케이션 개발에 용이하다.
        과정
            클라이언트 --> 컨트롤러 --> 모델 --> 데이터베이스(데이터)
                    ↖      ↓
                        ↖ 뷰2

MVC 패턴을 사용하는 이유
        사용자가 보는 페이지, 데이터 처리 그리고 이 두가지를 중간에서 제어하는 컨트롤,
        이 세가지로 구성되는 하나의 애플리케이션을 만들면 각각 맡은 바에만 집중할 수 있다.

        MVC 패턴의 사용 목적은 서로 분리되어 각자의 역할에 집중할 수 있게끔하여 개발하고
        그렇게 애플리케이션을 만든다면 유지보수성, 애플리케이션의 확장성 그리고 유연성이
        증가하고 '중복 코딩'이라는 문제점 또한 줄이거나 없앨 수 있다.


모델이란? 
    프로그램 실행에 관여하여 직접적인 작업을 이야기하는 것이 아니라 데이터를 담거나 
    데이터베이스로 데이터를 보내는 작업을 하는 객체들을 가리킨다.

    애플리케이션의 정보, 데이터를 나타낸다. 데이터베이스, 처음에 정의하는 상수, 초기값,
    변수 등을 뜻한다. 또한 이러한 데이터, 정보들의 가공을 책임지는 컴포넌트를 가리킨다.

    어플리케이션의 상태를 저장하고 있다가 뷰에서 요청해오는 상태 질의에 대한 응답을
    담당하고 컨트롤러에서 상태의 변화를 알려주면 모델 상태를 변화시키고 그 변화를
    뷰에게 알려주는 역할이다.
    
    DTO를 통해 상태의 값을 주고 받으며 영속 저장된 데이터와의 통신을 위해 DAO를 사용한다.

    모델은 다음과 같은 규칙을 가지고 있다.
        1. 사용자가 편집하길 원하는 모든 데이터를 가지고 있어야 한다.
           화면 안의 네모박스에 글자가 표현된다면 네모박스의 화면 위치 정보, 네모박스의 크기 정보,
           글자 내용, 글자 위치, 글자 포맷 정보 등을 가지고 있어야 한다는 것
        2. 뷰나 컨트롤러에 대해서 어떤 정보도 알지 말아야 한다.
           데이터 변경이 일어났을 때 모델에서 화면 UI를 직접 조정해서 수정할 수 있도록 뷰를
           참조하는 내부 속성값을 가지면 안 된다는 것
        3. 변경이 일어나면 변경 통지에 대한 처리방법을 구현해야만 한다.
           모델의 속성 중 텍스트 정보가 변경이 된다면 이벤트를 발생시켜 누군가에게 전달해야 하며
           누군가 모델을 변경하도록 요청하는 이벤트를 보냈을 때 이를 수신할 수 있는 처리 방법을
           구현해야 한다. 또한 모델은 재사용 가능해야 하며 다른 인터페이스에서도 변하지 않아야 한다.


뷰
    모델을 렌더링하여 실제 사용자에게 보여지는 부분을 가리킨다.
    모델의 변화된 상태를 요청하여 업데이트한다.
    뷰에서의 사용자 행위를 컨트롤러에서 전달한다.
    컨트롤러가 선택한 뷰에 접근할 수 있도록 허가한다.

컨트롤러
    뷰에 대한 하나의 진입점으로 어플리케이션의 행위를 정의해둔 부분을 이야기하고
    특정 결과에 대한 뷰를 선택하여 응답하는 역할을 한다.

    

MVC 활용 예시
        1) 사용자 등록을 위해 HTML 페이지를 작성한다. =뷰 영역
        파일이름 : Round10_Register.html
        2) HTML 페이지에서 넘어오는 데이터를 저장하는 DTO 클래스를 작성한다. =모델 영역
        파일이름 : Round10_MemberDTO.java
        3) 사용자 정보를 관리하기 위해 DBMS의 테이블을 생성한다. =물리적 저장 영역
        파일이름 : Round10_Member, 필드이름 : Num, Name, Tel, Address
        4) DTO에서 넘어온 데이터를 실제 DBMS에 저장하는 작업을 처리하는 DAO 클래스를 작성한다. =모델 영역
        파일이름 : Round10_MemberDAO.java
        5) 사용자가 HTML 페이지에 입력한 정보를 DTO에 담아 그것을 DAO 클래스 관련 메서드에 전송하는 작업을 담당하고
           그 결과에 따라 이동할 페이지를 결정하여 제어하는 서블릿 클래스를 작성한다. =컨트롤러 영역
        6) 처리 결과의 성공과 실패 여부를 출력하는 뷰 페이지를 작성한다. =뷰 영역
        파일이름 : Round10_Success.html





