커넥션풀 개요
        데이터베이스에 연결할 때 Connection은 생성하는 동안 많은 시스템 자원이 사용된다.
        즉, 메모리에 객체를 할당할 자리를 만들고 객체 초기화 작업과 이 객체가 해제될 때 정리하는 과정 등이 필요하다.
        이로 인해 시간적인 딜레이가 발생한다.

        이 작업을 매번 데이터베이스 접근 요청이 들어올 때마다 해야한다면 클라이언트가 기다리는 시간이 생긴다.
        이러한 문제를 해결하기 위해 "Connection 객체를 미리 만들어두고 DB 요청이 생기면 출동했다가
        할 일이 끝나면 다시 대기상태"로 둔다면 매번 생성하고 해제하는 작업을 할 필요가 없다.

        게다가 이러한 Connection 객체를 여러 개 만들어두면 여러 클라이언트가 요청했을 때
        여러 Connection 객체들이 일을 할 수 있을 것이다. 
        이렇게 Connection 객체들을 여러 개 보관해두는 곳이 Connection Pool이다.


커넥션 동작 과정
        1) 데이터베이스에 접근할 일 발생(회원 정보 저장, 회원 수정, 탈퇴)
        2) 커넥션 생성(con = Myconnection.connect())
        3) 데이터베이스 접근
        4) 쿼리문 전달
        5) 실행 결과 응답
        6) 종료 혹은 해제(con.close())

커넥션풀 동작 과정
        1) 커넥션 객체를 필요한 만큼 만들어 둔다.
        2) 컨테이너가 커넥션을 요청할 때 커넥션풀에 있는 커넥션 하나를 보낸다.
        3) 요청이 끝나면 커넥션을 회수한다.


필요한 라이브러리 : tomcat-dbcp.jar (톰캣에 위 라이브러리가 들어있다. C:\Tomcat9.0\lib\tomcat-dbcp)

커넥션풀 사용방법 
        1) DBCP API 관련 JAR 설치(Tomcat이 있다면 필요없음)
        2) DBCP에 관한 정보 설정
                - context.xml을 만들어서 관리한다.
                        XML이란?
                            · HTML이 가지고 있는 태그의 한계를 극복하고 여러가지 사용자 정의 태그를 만들 수 있다.
                            · 웹에서의 데이터 및 구조화된 문서들을 위한 표준이다.
                - META-INF/context.xml을 생성한다.
                - 사용 : 서버의 Connection들을 얻어오려면 javax.sql.DataSource를 이용한다.


커넥션풀에서 알아야 할 속성
        1. maxActive : 활동 중인 최대 커넥션의 최대 개수(음수: 제한없음, 기본값: 8)
        2. maxIdle   : 풀에서 대기하는 커넥션의 최대 개수(음수: 제한없음, 기본값: 8)
        3. minIdle   : 최소한으로 유지할 커넥션의 개수(기본값: 0)
        4. maxWaitMillis : 커넥션이 고갈되었을 경우 기다리는 시간(밀리초) (음수: 무한히 대기)
                           (whenExhaustedAction의 속성값이 1이어야 적용된다.)
        5. whenExhaustedAction : 빌려줄 커넥션이 고갈되었을 경우 할 행동
            0: 익셉션 발생
            1: maxWait 속성에서 지정한 시간만큼 커넥션을 구할 때까지 기다린다.
            2. 일시적을 커넥션을 생성한다.
        6. testOnBorrow : true로 설정할 경우 커넥션을 빌릴 때 커넥션이 유효한 지 먼저 검사한다.
        7. testOnReturn : true로 설정할 경우 커넥션을 반환할 때 커넥션이 유효한 지 먼저 검사한다.
        8. timeBetweenEvictionRunsMillis : 사용되지 않는 커넥션을 추출하는 쓰레드의 주기 설정(밀리초)
                                          (0 이하인 경우 실행되지 않는다.)
        9. numTestsPerEvictionRun : 사용되지 않는 커넥션을 몇 개 검사할 지 지정한다.
        10. minEvictableIdleTimeMillis : 사용되지 않는 커넥션을 추출할 때 지정된 시간(밀리초) 이상 비활성화 중인
                                         커넥션만 추출한다(0 이하인 경우 제거하지 않는다).
            예) minEvictableIdleTimeMillis = 300000 --> 300초(5분) 동안 비활성화 중이면 커넥션을 추출한다.
        11. testWhileIdle : true일 경우 비활성화 커넥션을 추출할 때 커넥션이 유효한 지 먼저 검사한다.
                            유효하지 않는 커넥션은 제거한다.