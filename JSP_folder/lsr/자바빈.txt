자바빈(JavaBean) 혹은 자바빈즈 
        자바빈즈 규격서에 따라 작성된 자바 클래스

자바빈즈 규약사항
    - Bean은 반드시 특정 패키지 소속이어야 한다.
    - Bean에 선언된 멤버변수(필드)는 ProPerty(프로퍼티)라고 부른다.
    - 프로퍼티는 반드시 private으로 선언되어야 하며 이를 위한 getter와 setter가 있어야 한다.
    - getter, setter는 반드시 public으로 선언한다.
    - 필요에 따라 직렬화(implements Serializable) 할 수 있다.

자바빈즈의 종류
        1) DTO, Data Transfer Objects : '데이터' 세트
        2) DAO, Data Access Objects   : 데이터베이스에 접근할 때 사용할 '메서드'의 집합
        3) VO, Value Objects : 데이터 그 자체로 의미 있는 것을 담고 있는 객체다.


DTO
        계층 간 데이터 교환을 위한 자바빈즈를 의미한다.
        여기에서 계층 간은 Controller, View, Business Layer, Persistent Layer 등을 말하며 각 계층 간 데이터 교환을 위한 객체다.
        로직을 가지지 않는 순수한 데이터 객체다. getter, setter 메서드만을 가진 클래스를 의미한다.


DAO
        데이터베이스의 데이터에 접근하기 위한 객체
        데이터베이스를 접근하기 위한 로직과 비즈니스 로직을 분리하기 위해 사용한다.

        DAO의 경우, DB와 연결할 Connection까지 설정되어 있는 경우가 많다.
        때문에 현재 많이 쓰이는 Mybatis 등을 사용할 경우 커넥션풀까지 제공되기 때문에 DAO를 별도로 만드는 경우는 드물다.

VO
        값 오브젝트로써 값을 위해 쓰인다. 
        자바는 값 타입을 표현하기 위해 불변 클래스를 만들어서 사용하는데 불변이라는 것은 readOnly 특성을 가진다.
        이러한 클래스는 중간에 값을 바꿀 수 없고 새로 만들어야 한다는 특징이 있다.
        예를 들어 Color 클래스를 보면 Red를 표현하기 위해 Color.RED 등을 사용하며 getter 기능만이 존재한다??
        DTO와 동일한 개념이나 차이점은 Read Only 속성 객체다.
        간단한 독립체(Entity)를 의미하는 작은 객체를 의미한다.
        관계 데이터베이스의 레코드에 대응되는 자바클래스다.
        불변성을 가지고 equals()로 비교할 때 객체의 모든 값을 비교해야 한다.

** DTO와 VO
        공통점은 넣어진 데이터를 getter를 통해 사용하므로 주 목적은 같다.
        그러나 DTO의 경우 setter를 활용하는 가변의 성격을 가진 클래스다.
        그에 반해 VO는 불변의 성격을 가졌고 읽기 속성만 있다.




   출처: https://lemontia.tistory.com/591
** getter/setter와 Property(프로퍼티) 개념

        예제            public class PersonDTO {

                        private String name;
                        private int age;

                        public String getName() {
                            return name;
                        }

                        public void setName(String name) {
                            this.name = name;
                        }

                        public int getAge() {
                            return age;
                        }

                        public void setAge(int age) {
                            this.age = age;
                        }
                    }
    위의 클래스를 보면 getter/setter가 존재한다. 중요한 것은 Property(프로퍼티) 개념이다. 
    자바는 프로퍼티가 문법적으로 제공되지 않는다. 자바에서 프로퍼티라는 개념을 사용하기 위해 지켜야 하는 약속이 있다.
    getter/setter에서 get과 set 이후에 나오는 단어가 프로퍼티라고 약속하는 것이다. 위 클래스에서 프로퍼티는 name과 age다.
    중요한 것은 프로퍼티가 멤버변수 name, age로 결정되는 것이 아닌 getter/setter에서의 name과 age임을 명심해야 한다.
    즉, 멤버변수는 아무렇게 지어도 영향이 없고 getter/setter로 프로퍼티(데이터)를 표현한다는 것이다.
    자바는 다양한 프레임워크에서 데이터 자동화 처리를 위해 리플렉션 기법을 사용한다. 데이터 자동화 처리에서 제일 중요한 것은 표준 규격이다.
    예를 들어, 위 클래스 DTO에서 프로퍼티가 name, age라면 키값으로 들어온 데이터는 리플렉션 기법으로 setter를 실행시켜 데이터를 넣을 수 있다.
    중요한 것은 우리가 setter를 요청하는 것이 아닌 프레임워크 내부에서 setter가 실행된다는 점이다. 
    레이어 간(특히 서버 -> 뷰 이동)에 데이터를 넘길 때에는 DTO를 쓰면 편하다는 것이 이런 이유 때문이다.
    뷰에 있는 form에서 name 필드값을 프로퍼티에 맞춰 넘겼을 때 받아야 하는 곳에서는 일일히 처리하는 것이 아니라
    name 속성의 이름과 매치되는 프로퍼티에 자동적으로 DTO가 인스턴스화되어 PersonDTO를 자료형으로 값을 받을 수 있다.
    그래서 key-value로 존재하는 데이터는 자동화 처리된 DTO로 변환되어 데이터가 세팅된 오브젝트를 쉽게 받을 수 있다.





