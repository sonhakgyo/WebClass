🎁. 상속(inheritance) : 
기존에 사용 중인 클래스의 필드를 다른 클래스에서 계속 사용을 해야 한다면 상속을 받는다. 그렇게 되면 부모 클래스의 필드를 마치 자신의 것처럼 사용할 수 있다.

※ 상속 시 주의할 점
1. 상속 시에 생성자는 상속되지 않는다.
2. 다중상속을 지원하지 않는다.
3. 클래스 앞 final 키워드는 다른 클래스가 상속 불가능하다.

A = 부모, 상위, 슈퍼. 기반, 조상 클래스
B = 자식, 하위, 서브, 파생, 자손 클래스

    💎. 부모 클래스로부터 상속받은 멤버변수의 접근권한이 'PRIVATE'일 때,
    1. 부모 클래스의 생성자를 호출해서 초기화시킬 수 있다.
    2. 부모 클래스에 setter 메소드를 통해서 초기화시킬 수 있다. 
    3. 변수에 저장된 값은 getter 메서드를 통해서 가져온다.

    💎. 부모 클래스로부터 상속받은 멤버변수의 접근권한이 'PROTECTED'일 때,
    1. 자식 클래스에서 접근이 가능하기 때문에 this. 를 사용해서 초기화한다.
    2. 자식 클래스에서 접근이 가능하므로 getter 메서드를 사용하지 않고, 변수명으로 직접 접근하면 된다.

    * 자식 클래스의 생성자가 실행되기 전에 부모 클래스의 생성자가 먼저 실행된다.
    * 실행할 부모 클래스의 생성자를 지정하지 않으면 부모 클래스의 기존 생성자가 자동 실행된다.
    * 자동으로 입력되는 super()를 지우더라도 자바 컴파일러가 자동으로 넣어(만들어)준다.
    * 생성자는 항상 부모가 먼저다.


🎁. 다형성(polymorphism) : 
- 다형성이란, 하나의 메서드가 서로 다른 클래스에서 다양하게 실행되는 것을 말한다. 다형성을 구현하기 위해서는 다형성을 구현할 메서드를 포함할 클래스에게 부모 클래스가 상속해줘야 한다.
- 부모 클래스와 자식 클래스에 같은 이름의 메서드가 있어야 하고, 자식 클래스에서는 재정의(오버라이딩) 해야 한다.
- 따라서 다형성의 종류에는 '오버로딩'과 '오버라이딩'이 있다.
+ 상속과 함께 객체지향의 중요한 특징이며 상속과 깊은 관계가 있다.
+ 자바에서는 한 타입의 참조변수로 여러개의 객체를 참조할 수 있도록 다형성을 프로그램으로 구현 할 수 있다. 

오버라이드 : 재정의
오버로딩 : 중복정의

'상속성'과 '다형성'이 필요한 이유는 상속성은 객체 간의 공통적인 기능을 관리하기 위한 기법으로 코드의 재사용을 통하여 프로그램의 유지보수를 편리하게 하며 다형성(Override, Overload)은 서로 다른 기능이지만 메서드의 이름을 공통되게 처리함으로써 전체 프로그램의 일관성을 유지하기 위함이다.

<Method Override>
- 부모 클래스로부터 상속을 받은 메서드의 내용을 변경하는 것
- 상속받은 메서드를 그대로 사용하지만 자식 클래스가 자신에 맞게 변경을 해야하는 경우도 있다.

예시)
<Parent class>
class Point {
    int x;
    int y;
    String getNum();
        return x + y;
    }
}
<Child class>
class Point3D extends Point {
    int getNum();
        return x - y;
}

메서드 오버라이드의 조건
▶ 서로 동일한 이름의 메서드일 때만 성립이 된다.
▶ 서로 동일한 데이터 타입의 메서드일 때만 성립이 된다.
▶ 서로 반환되는 타입이 같아야 한다.
▶ 접근제어자 등 제한된 조건 하에서 다르게 변경할 수 있다.

Super 클래스
- 자식 클래스에서 부모 클래스를 가리키는데 사용되는 참조변수
- 멤버 변수와 지역 변수의 이름이 같을 때 this를 붙여서 구별을 했던 것처럼 상속받은 멤버와 자기 자신의 멤버 이름이 같은 경우는 super로 구별할 수 있다.
- 멤버 변수가 부모 클래스인 parent에도 있고 자식 클래스인 child에도 있을 때는 super.x와 this.x가 서로 다른 값을 참조하게 된다. this x는 자식 클래스에 선언된 멤버 변수를 의미한다.

생성자가 있는 클래스
- 생성자에도 super()를 사용해서 부모 클래스의 생성자를 호출하는데 사용되며 자식 클래스에서 객체를 생성하면 자식의 멤버와 부모의 멤버가 모두 합쳐진 하나의 객체가 생성된다. 그래서 자식 클래스의 인스턴스가 부모 클래스의 멤버들을 사용할 수 있는 것이다. 이때 부모 클래스 멤버의 초기화 작업이 수행되어야 한다. 따라서 자식 클래스에서의 생성자에서 부모 클래스의 생성자를 호출한다.
- 즉, 모든 클래스에서 생성자 첫 줄에 자바가 자동적으로 super();를 생성자 첫 줄에 삽입한다.

















