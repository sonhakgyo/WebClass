/*
업캐스팅
    부모클래스 타입으로 자식 생성자를 호출하는 것
    부모클래스명 객체명 = NEW 자식생성자();
    부모와 자식 간의 공통요소(재정의 메서드)만 사용 가능하며
    자식클래스의 추가된 것들은 사용할 수 없다.
    부모 타입으로 선언되었기 때문에 부모의 필드만 사용 가능하지만
    자식클래스에서 재정의했다면 재정의된 메서드로 사용된다.

다운캐스팅
    자식클래스 타입으로 부모 생성자를 호출하면 에러, 오류
    부모의 범위가 더 크기 때문에 자식에 담을 수 없다.

각각의 타입을 확인할 때 사용하는 문법
	값 instanceof 클래스타입 : 값이 클래스 타입인가?
	   참 또는 거짓
       
싱글톤 패턴(Singleton Pattern)
    객체가 단 1개만 존재할 때, 외부에서 new를 하지 못하게 막아주고
    클래스 내부에서 new를 한 후 외부에서 선언이 아닌 사용만 해준다.

*/

package casting;

public class Casting {
	public static void main(String[] args) {
		/* 업캐스팅 */
		Car noOptionFerrari = new SuperCar(); 
//		noOptionFerrari.engineStart();
		
		/* 다운캐스팅 : 오류(ClassCastException) */
//		SuperCar brokenCar = (SuperCar)new Car();
//		brokenCar.changeMode("스포츠");
		
		Car car = new Car();
		SuperCar ferrari = new SuperCar();
		
		/* car는 Car 클래스타입이다. */
		if (car instanceof Car) {
			System.out.println("NICE CASTING"); /* 출력 */ 
		}else {
			System.out.println("ERR : WRONG CASTING");
		}
		
		/* ferrari는 SuperCar 클래스타입이다. */
		if (ferrari instanceof Car){
			System.out.println("NICE CASTING"); /* 출력 */
		}else {
			System.out.println("ERR : WRONG CASTING");
		}
		
		/* Car 클래스타입이지만 자식 생성자 SuperCar를 호출했다. */
		if (noOptionFerrari instanceof Car) {
			System.out.println("NICE CASTING");
		}else {
			System.out.println("ERR : WRONG CASTING");
		}
		
		/* car는 Car클래스타입이고, SuperCar는 Car클래스를 상속받았다. */
		if (car instanceof SuperCar) {
			System.out.println("NICE CASTING");
		}else {
			System.out.println("ERR : WRONG CASTING"); /* 출력 */
		}
		
	}
}

class Car {
	String brand;
	String color;
	int price;
	
	public Car() { /* 기본 생성자 */
		// TODO Auto-generated constructor stub
	}
	public Car(String brand, String color, int price) {
		super();
		this.brand = brand;
		this.color = color;
		this.price = price;
	}
	void engineStart() { 
		System.out.println("열쇠로 시동 킴");
	}
	void engineStop() { 
		System.out.println("열쇠로 시동 끔");
	}
}

class SuperCar extends Car {
	String mode;
	
	public SuperCar() { /* 기본 생성자 */
		// TODO Auto-generated constructor stub
	}
	public SuperCar(String brand, String color, int price, String mode) {
		super(brand, color, price);
		this.mode = mode;
	}
	void changeMode(String newMode) {
		this.mode = newMode;
		System.out.println("모드가 바뀌었습니다.");
	}
	@Override /* 어노테이션 오버라이드라고 읽는다. */
	void engineStart() {
		System.out.println("음성으로 시동 킴");
	}
	@Override 
	void engineStop() {
		System.out.println("음성으로 시동 끔");
	}
}


