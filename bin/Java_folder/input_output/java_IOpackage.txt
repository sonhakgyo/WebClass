입출력, 자바의 IO 패키지
                        1. IO와 스트림
                        2. 바이트 기반 스트림
                        3. 바이트 기반 보조 스트림
                        4. 문자 기반 스트림
                        5. 문자 기반 보조 스트림
                        6. 스트림의 예외처리
                        7. 객체 직렬화


IO와 스트림(Stream)
    1) IO : 프로그램 기준으로 입력과 출력이 정해진다.
            입력(input)  : 프로그램에 데이터가 들어오는 것
            출력(output) : 프로그램의 데이터가 나가는 것
    2) 스트림
            데이터의 흐름
            입력 스트림 : 키보드, 파일
            출력 스트림 : 모니터, 파일

            스트림의 특징
                - 단방향이다.
                - FIFO 구조이다.
                - 출력 단위에 따라 바이트 기반과 문자 단위로 분류된다.
                - 출력 단위 : 1byte => 바이트 기반 스트림(InputStream, OutputStream)
                             문자   => 문자 기반 스트림(Reader, Writer)


바이트 기반 스트림
        바이트 단위로 데이터를 입출력하는 스트림

    바이트 기반 스트림 활용
        1)입력과 출력에 따라 read()와 write()를 구현하여 사용한다.
            · InputStram
                - abstract int read()
                - int read(byte[] b)
                - int read(byre[] b, int off, int len)

            · OutputStream
                - abstract void write(int b)
                - void write(byte[] b)
                - void write(byte[] b, int off, int len)

        2)데이터를 읽거나 쓰는 '대상'에 따라서 적절한 스트림을 사용한다.
            파일
                입력 스트림 : FileInputStream
                출력 스트림 : FIleOutputStream
            메모리
                입력 스트림 : PipedInputStream
                출력 스트림 : PipedOutputStream
            오디오
                입력 스트림 : AudioInputStream
                출력 스트림 : AudioOutputStream
            프로세스
                입력 스트림 : ByteArrayInputStream
                출력 스트림 : ByteArrayOutputStream

        3)스트림을 사용할 때는 인스턴스 생성 시 적절한 값을 전달한다.
            예) 파일 입출력
                    FileInputStream fis = null;
                    fis = new FileInputStream("파일위치");
                    fis.read;


바이트 기반 보조 스트림
        바이트 기반 보조 스트림은 실제 바이트 기반 스트림의 성능을 향상시키는 역할
        바이트 기반 보조 스트림의 활용
            필터를 이용한 입출력
                    입력 보조 스트림 : FilterInputStream
                    출력 보조 스트림 : FilterOutputStream
            버퍼를 이용한 입출력
                    입력 보조 스트림 : BufferedInputStream
                    출력 보조 스트림 : BufferedOutputStream
            기본 단위로 데이터 처리
                    입력 보조 스트림 : DataInputStream
                    출력 보조 스트림 : DataOutputStream
            print, printf, println 사용
                    입력 보조 스트림 : X
                    출력 보조 스트림 : PrintStream

            예) BufferedInputStream 활용
                    FileInputStream fis = null;
                    fis = new FileInputeStream("파일위치");
                    BufferedInputStream bis = new BufferedInputStream(fis);


문자 기반 스트림
        16비트의 문자나 문자열을 읽고 쓰는 스트림

        문자 기반 스트림의 활용 
            자바에서 사용하는 Char형 변수는 2바이트이므로 바이트 기반 스트림은 불편하다.
            문자 단위로 입출력을 다루는 문자 기반 스트림을 제공한다.

            Reader
                int read()
                int read(char[] cbuf)
                abstract int read(char[] cbuf, int off, int len)
            
            Writer
                void write(int c)
                void write(char[] cbuf)
                abstract void write(char[] cbuf, int off, int len)
                void write(String str)
                void write(String str, int off, int len)

        대상에 따른 스트림 종류
                파일 
                        입력 스트림 : FileReader
                        출력 스트림 : FileWriter
                메모리
                        입력 스트림 : PipedReader
                        출력 스트림 : PipedWriter
                프로세스
                        입력 스트림 : CharArrayReader
                        출력 스트림 : CharArrayWriter

                예) FileReader fr = null;
                    fr = new FileReader("파일 경로");


문자 기반 보조 스트림
        문자 기반 스트림의 성능을 향상시키는 역할

        문자 기반 보조 스트림의 활용
                필터를 이용한 문자 입출력
                    입력 보조 스트림 : FilterReader
                    출력 보조 스트림 : FilterWriter
                버퍼를 이용한 문자 입출력
                    입력 보조 스트림 : BufferedReader
                    출력 보조 스트림 : BufferedWriter

                예) FileReader fr = null;
                    fr = new FileReader("파일 경로");
                    BufferedReader br = new BufferedReader(fr);


스트림의 예외처리
        입출력의 모든 메서드는 IOException이 발생할 가능성이 높으므로 예외처리가 필요하다.
        실습 : 파일 복사 프로그램의 예외처리 코드, 문자 기반 스트림 활용


객체 직렬화
        자바 시스템 내부에서 사용하는 객체나 데이터를 외부의 시스템에서 사용할 수 있도록 '바이트 단위의 데이터로
        변환시키는 기술'이기도 하고 '바이트로 변환된 데이터를 다시 객체로 변환하는 기술'이다.

        [1] 객체 전송의 단계
                1) 직렬화된 객체를 바이트 단위로 분해한다.          => 마샬링 Marshalling
                2) 직렬화되어 분해된 데이터를 순서에 따라 전송한다.
                3) 전송받은 데이터를 복구한다.                     => 언마샬링 Unmarshalling

        [2] 마샬링 Marshlling
                - 데이터를 바이트 단위의 데이터로 변환시키는 작업
                - 마샬링을 적용할 수 있는 데이터
                        기본 자료형 : boolean, char, byte, short, int, long, float, double ···
                - Serializable 인터페이스를 구현한 클래스로 만들어진 객체
                                                   예)  class A implements Serializable {
                                                                // 작업할 내용
                                                        }
                                                        A a = new A;
                - 사용할 클래스 : ObjectOutputStream

        [3] 직렬화(Serializable)
                Serializable 인터페이스는 메서드 없이 JVM에게 정보 전달 기능만 존재한다.

        [4] 언마샬링 Unmarshalling
                - 객체 스트림을 통해 전달된 바이트 단위의 데이터를 원래의 객체로 복구하는 작업이다.
                - 언마샬링 시 주의할 점!
                        어떤 객체 형태로 복구할지 형 변환을 정확하게 명시한다.
                - 사용할 클래스 : ObjectInputStream


