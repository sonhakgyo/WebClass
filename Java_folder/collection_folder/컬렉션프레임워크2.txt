컬렉션 프레임워크
                1. 셋 Set
                2. 리스트 List

1. 셋 Set
    - 요소들을 집합적으로 모아놓은 자료구조
    - 인터페이스
    - 중복을 허용하지 않는다.
    - 저장 순서가 없다.

    셋(Set)을 구현한 클래스 
        - 해쉬셋 HashSet
        - 트리셋 TreeSet

        [1] 해쉬셋 HashSet
            - Set과 동일하게 중복이 없고, 순서가 없다.
            - 중복된 요소 add() 시에는 집합에 추가되지 않고 false값을 반환한다.

            <생성자>
                HashSet()             : HashSet 클래스의 기본 생성자
                HshSet(Collection c)  : 컬렉션의 요소로 HashSet 객체 생성
                HashSet(int capacity) : capacity 용량을 갖는 객체 생성

        [2] 트리셋 TreeSet
            - Set과 동일하게 중복은 없으나 정렬 기능이 추가된 형태이다.
            - 데이터 추가 시 기준 데이터보다 작다면 기준의 왼쪽에 위치한다.
            - 데이터 추가 시 기준 데이터보다 크다면 기존의 오른쪽에 위치한다.
            - '이진 탐색 트리'의 구조와 같다.


2. 리스트 List
    - 데이터를 일렬로 늘어놓은 구조
    - 인터페이스
    - 중복을 허용한다.
    - 순서가 있다.

    <리스트 인터페이스의 주요 메서드>
        add(int index, E elem) : index 위치에 elem 추가
        get(int index)         : index 위치에 있는 요소 반환
        indexOf(Object o)      : 요소 o가 있는 위치 반환
        listiterator()         : Listiterator() 반환
        remove(int index)      : index 위치 요소 삭제 후 삭제값 반환
        set(int index, E elem) : index 위치 요소를 elem으로 변경

    리스트(List) 인터페이스를 구현한 클래스
        - 어레이리스트 ArrayList
        - 링크드리스트 LinkedList

        [1] 어레이리스트 ArrayList
            - 요소 추가 시 0번 인덱스부터 차례대로 요소를 저장한다.
            - 배열처럼 크기가 정해져 있지 않다. 추가할 수 있다.
            - 배열에서 발전된 형태이다.

        [2] 링크드리스트 LinkedList 
            - 요소들이 서로 논리적으로 연결되어있는 리스트
            - 각 요소가 다음 요소의 주소를 저장한다.





