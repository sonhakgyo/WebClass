컬렉션 프레임워크4
                    1. 맵 Map
                    2. 해쉬맵 HashMap   

    맵 Map
        - 키를 통해서 값을 참조할 수 있는 구조이다.
        - 인터페이스이기 때문에 사용하려면 업캐스팅(Upcasting)이 필요하다.

    [맵에서 제공하는 메서드]
        V get(Object Key)                   : 해당 Key와 쌍인 값을 반환
        V put(K key, V value)               : 키와 값을 요소로 추가
        V remove(Object Key)                : 이 키를 가진 요소를 제거
        boolean containsKey(Object Key)     : 해당 키가 있는지 여부 반환
        boolean containsValue(Object value) : 해당 값이 있는지 여부 반환
        boolean isEmpty()                   : 맵 객체에 요소가 없으면 true 반환
        Set<Key> keySet()                   : 키들을 Set 형태로 반환
        int size()                          : 전체 요소의 개수를 반환

    맵 Map을 구현한 대표 클래스
                            - 해쉬맵 HashMap
                            - 트리맵 TreeMap

        [1] 해쉬맵 HashMap 
            - HashMap<String, String> 컬렉션
            - Key와 Value 값으로 데이터를 저장하는 형태
            - Map 인터페이스의 한 종류
            - Map의 모든 속성을 갖고 있으며 저장 방식은 동일하다.
            - '해싱(Hashing)'이라는 검색 알고리즘을 사용한다.
            - Key의 중복은 허용하지 않으나 Value의 중복은 허용한다.

        해싱(Hashing)이란?
            · 메모리 낭비를 최소화하기 위해 저장할 값을 입력받을 시 연산(Hash Function)을 통해 
              해시 테이블에 새로운 주소 값을 생성하여 메모리에 저장(맵핑 Mapping)하는 기법이다.
            · 입력개수 < 입력최댓값일 때는 메모리 낭비가 심하다는 단점이 발생한다.
            · 찾을 값(Key)을 갖고 저장된 위치를 알 수 있고 메모리 낭비를 최소화해주는 것이 '해싱'이다.

            # 알고리즘      : 문제를 해걸하기 위한 절차적 해결 과정
            # 검색 알고리즘 : 자료구조 내의 데이터 중 원하는 데이터를 찾는 과정
            # 배열에 저장된 데이터를 가장 빨리 찾는 방법 
                - 저장된 데이터가 몇 번째 위치하는지를 알아오는 것이다.
                - 데이터를 넣을 때 '데이터 값'을 '위치 값'으로 하면 가장 빠르게 데이터를 찾을 수 있다.

        해싱의 구조 
            - 키 값을 해시 값으로 변경해주는 '해시 함수'
            - 변경된 해시 값으로 저장할 공간인 '해시 테이블'
        