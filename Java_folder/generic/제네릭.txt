🎁. 제네릭(Generic) : 포괄적인, 총칭의
- 자료형을 정하지 않는 기법(내부가 아닌 외부에서 지정)
    오버로딩을 계속 하면 코드 양이 길어진다. 때문에 타입을 미지정한다. 
    외부에서 무슨 타입을 정해놓지 않는 것이다. 이것을 제네릭이라고 한다.

    내가 쉽게 얘기하자면, 타입을 임의로 정하고 인터페이스처럼 구현할 때 정의한다.

✔. 표기방법 : 클래스명<대문자> 객체명 = new 클래스명<>();
✔. 예시 :
    <E> - Element
    <K> - Key
    <N> - Number
    <T> - Type
    <V> - Value      

제네릭 종류
    1. Generic class 제네릭 클래스
        - 클래스 내부에서 사용될 자료형을 지정한다. 

    2. Generic Method 제네릭 메서드
        - 클래스에 제네릭을 선언하지 않고 메서드에만 제네릭을 선언하는 것이다.
        - 메소드의 매개변수 또는 리턴타입이 제네릭이라면 
          리턴타입 앞에도 반드시 제네릭을 선언해야 한다.

    3. Generic Interface 제네릭 인터페이스
        - 미구현된 메서드(인터페이스) 앞에 제네릭을 붙여준다.

싱글톤 패턴
    - 단 한개의 객체만은 가지고 있는 클래스를 싱글톤 패턴으로 구현한다.
    - 클래스 내부에 객체를 생성하고 그 객체를 다른 곳에서 공통으로 사용한다.
    - 즉, 그 객체는 하나 뿐이다. (예: Date와 Calender에서 쓰인다.)
    - 클래스 내부에서 생성자에 private 접근제어자를 지정한다.
    - 그럼 다른 개발자가 사용 혹은 접근할 수 없다.

---------------------------------------------------------------------------------

제네릭이란? 
    - 클래스 내부에서 사용할 데이터 타입을 외부에서 지정하는 기법을 의미한다.
    - 복수의 제네릭, 클래스 내에서 여러개의 제네릭을 필요로 하는 경우가 있을 것이다.
    - 제네릭은 생략 가능하다. 
    - 제네릭은 메서드에 적용할 수 있다.

class Person<T> {
    public T info;
}
public static void main(Stringp[] args) {
    Person<String> p1 = new person<String>();
    Person<StringBuilder> p2 = new Person<StringBuilder>();
}








