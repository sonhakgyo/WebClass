스레드 Thread
            1. 스레드 정의
            2. 스레드 생성
            3. 스레드의 우선순위 
            4. 스레드의 라이프 사이클

스레드란?
        하나의 프로세스 안에서 두 가지 이상의 일을 하도록 하는 것

[용어 정리]
        프로세스 : 실행 중인 프로그램
        스레드   : 프로세스에서 작업을 수행하는 것
        멀티 스레드 프로세스
                : 두 가지 이상의 작업을 하는 프로세스

프로세스가 실행되는 방식
        1. 시간 분할 방식
            모든 프로세스에게 동일한 시간을 할당하고 골고루 실행되는 방식
        2. 선점형 방식
            각각의 프로세스에게 우선순위를 부여하고 우선순위가 높은 순으로 실행되는 방식 

스레드의 생성
        JVM이 스레드 처리 시 하는 일 : 스레드 스케쥴링
            - 스레드가 몇 개 존재하는지
            - 스레드가 실행되는 프로그램 코드의 메모리 위치가 어디인지
            - 현재 스레드의 상태는 무엇인지
            - 스레드의 우선순위는 몇인지

        개발자가 스레드 처리 시 하는 일
            - 자바 스레드로 작동할 작업이 무엇인지 코드로 작성한다.
            - 스레드 코드가 실행할 수 있도록 JVM한테 요청한다.

    1. 스레드 작업 코드 작성 방법
        1) Thread 클래스 상속
                                    class T1 extends Thread {
                                        @run() 메서드 오버라이딩
                                        public void run() {   
                                            // 작업할 내용
                                        }
                                    }

        2) Runnable 인터페이스 구현
                                    class T2 implements Runnable {
                                        @run() 메서드 오버라이딩, 무조건 오버라이딩 해야 한다.
                                        public void run() {
                                            // 작업할 내용
                                        }
                                    }

스레드의 우선순위
        스레드는 시분할 방식으로 CPU의 시간을 분배하여 실행하지만 
        사용자가 직접 스레드의 우선순위를 지정해서 특정 스레드에 더 많은 실행시간을 부여할 수 있다.
        
        <우선순위 지정 메서드>
            - 우선순위 지정 : void setPriority(int newPriority)
            - 우선순위 반환 : int getPriority()               
            - 우선순위는 1부터 10까지 부여할 수 있다.
            - 설정하지 않을 경우 기본적으로는 5이다.

        
스레드의 라이프사이클
        스레드는 현재 상태에 따라 네 가지 상태로 분류할 수 있으며
        상태가 변화하는 주기를 라이프사이클이라고 한다.

        <스레드 상태>
            new : 
                스레드가 키워드 new를 통해서 '인스턴스화'된 상태
                Runnable이 될 수 있는 상태이며 아직 대기열에 올라가지 못한 상태
            Runnable :
                start() 메서드가 호출되면 new 상태에서 Runnable 상태가 된다.
                Runnable 상태가 되면 실행할 수 있는 상태로 대기하게 되며 스케쥴러에 의해
                선택되면 run() 메서드를 바로 수행한다.
            Blocked :
                실행 중인 스레드가 sleep(), join() 메서드를 호출하게 되면 Blocked 상태가 된다.
                Blocked 상태가 되면 스케쥴러에 의해서 선택받을 수 없다.
            Dead :
                run() 메서드의 실행을 모두 완료하게 되면 스레드는 Dead 상태가 된다.
                할당받은 메모리와 정보 모두 삭제된다.


        [1] sleep() 
            스레드를 지정한 시간 동안 Block 상태로 만든다.
            시간은 1000분의 1초까지 지정할 수 있으며 지정된 시간이 지나면 
            다시 runnable(실행 가능한) 상태로 돌아간다.

        [2] yield
            자신의 시간을 양보하는 메서드이다.
            스레드가 작업을 수행하던 중 yield()를 만나면 자신에게 할당된 시간을
            다음 차례 스레드에게 양도한다.
            
        [3] join()
            특정한 스레드가 작업을 먼저 수행할 때 사용한다.
            실행 순서를 지켜야 하는 스레드들을 제어한다.