자바 GUI Programming
                    1. GUI
                    2. AWT와 Swing
                    3. Swing GUI Programming
                    4. 이벤트(Event) 처리

[GUI, Graphical User Interface]
        컴퓨터를 사용하는 사용자를 위해 만들어진 특정한 기능을 가진 그래픽 요소

        [1] 자바 GUI 프로그래밍
                사용자가 프로그램을 쉽게 다룰 수 있도록 그래픽을 제공하도록 프로그래밍하는 것

[AWT와  Swing]
        AWT와 Swing 차이점 : AWT는 운영체제의 자원을 활용한다.

        ★ AWT란?
                자바에서 GUI를 프로그래밍하기 위해 처음으로 제공한 라이브러리
        특징 
                - java.awt 패키지에 Frame, Window, Panel, Button, Label 등이 존재한다.
                - 운영체제의 자원을 활용한다.

        ★ Swing이란?
                AWT를 대체하기 위해 자바로 작성된 GUI 객체
        특징
                - javax.swing 패키지에 JFrame, JWindow, JPanel, JButton, JLable 등이 존재한다.
                - AWT와 이름을 구별하기 위해 각각의 이름 앞에 J를 붙였다.
                - 운영체제에 의존적이지 않으며 운영체제와 관계없이 동일(비슷)한 모양을 사용한다.
                - 운영체제에 부담을 덜 주기 때문에 Swing을 더 추구한다.
                - 디자인도 AWT보다 더 고급스럽다.
        
        컴포넌트와 컨테이너
                컴포넌트 : 자바에서 GUI를 구성하는 요소
                컨테이너 : 다른 컴포넌트를 포함할 수 있는 컴포넌트

        실제 GUI 프로그래밍을 하기 위해서 사용하는 메서드
                setLocation(int x, int y)      : 프레임의 위치를 지정한다.
                setSize(int width, int height) : 프레임의 크기를 지정한다.
                setIconImage(Image IconImage)  : 프레임의 타이틀바에 보여질 아이콘을 설정한다.
                setTitle(String title)         : 타이블바의 제목을 설정한다.
                setVisible(boolean b)          : 화면에 표시여부를 설정한다.

        GUI 프로그래밍 순서 
                1. extends JFrame 
                        - JFrame 클래스를 상속받아 나만의 프레임 클래스를 작성한다.
                        - 생성자에서 컴포넌트 및 프레임의 디자인을 구현한다. 
                2. 기본 설정
                        - title 설정   : setTitle("타이틀명");
                        - size 설정    : setSize(가로길이, 세로길이);
                        - visible 설정 : setVisible(true);

Swing GUI Programming 
        배치 관리자(Layout Manager)
                컨테이너 내부에 컴포넌트 추가 시 각각의 위치와 크기에 관해 설정한다.

        배치 관리자의 종류
                FlowLayout   : 왼->오 순서대로 배치한다.
                BorderLayout : 컨테이너 공간을 동서남북 중앙으로 나누고 지정한 영역에 배치한다.
                GridLayout   : 컨테이너 공간을 동일 크기의 2차원 격자로 나누고 들어오는 순서대로 왼->오 배치한다.
                CardLayout   : 카드를 쌓아놓은 듯이 컴포넌트를 쪼개어 배치한다.

이벤트(Event) 처리
        이벤트 
                프로그램을 실행하는 도중 사용자에 의해 발생하는 키보드 입력, 마우스 클릭 등의 동작

        이벤트 처리
                이벤트가 발생했을 때 어떤 작업을 할 것인지 결정하는 것

        이벤트 객체
                이벤트 발생 시 이벤트에 대한 정보를 가진 객체
                        예) 이벤트의 종류, 이벤트가 발생한 위치(마우스 좌표 등), 체크박스의 체크 상태

        이벤트 리스너
                이벤트 객체에 의해서 호출되어 해당 이벤트를 처리하는 객체
                        이벤트 리스너 사용 시 해당 인터페이스의 추상 메서드를 구현해야 한다.
        이벤트에 따른 리스너의 종류
                이벤트 종류
                        Action, Key, Mouse
                리스너 인터페이스
                        ActionListener, KeyListener, MouserListener

        Action  Action/  ActionListener/  void actionPerformed(ActionEvent) : Action 발생 시
                
        Key     Key/     KeyListener/     void KeyPressed(KeyEvent)         : 키가 눌려질 때
                Key/     KeyListener/     void KeyReleased(KeyEvent)        : 눌려진 키를 뗄 때
                Key/     KeyListener/     void keyTyped(KeyEvent)           : 유니코드 키 입력 시

        Mouse   Mouse/   MouserListener/ void MouserPressed(MouseEvent)     : 마우스 버튼이 눌릴 때
                Mouse/   MouserListener/ void MouseReleased(MouseEvent)     : 눌린 마우스 버튼을 뗄 때
                Mouse/   MouserListener/ void MouserClicked(MouseEvent)     : 클릭 시
                Mouse/   MouserListener/ void MouserEntered(MouseEvent)     : 마우스 포인터가 컴포넌트에 올라올 때
                Mouse/   MouserListener/ void MouserExisted(MouseEvent)     : 마우스 포인터가 
        
