인터페이스  
    추상 클래스를 고도화시킨 문법이며, 반드시 추상 메서드와 상수만 선언해야 한다.
    다른 클래스에서 인터페이스를 구현(지정)할 때에는 implements를 사용한다.
    지정된 인터페스가 가지고 있는 추상 메서드들들 반드시 재정의해야 한다.
    일반 메서드는 정의할 수 없다.
    자바는 다중 상속이 불가능하지만 인터페이스는 다중 상속이 가능하다.

    일종의 추상 클래스이다. 추상 클래스보다 추상의 정도가 높아 '구현이 없는 메서드'와 
    '멤버변수'를 구성원으로 가질 수 없다. 오직 추상 메서드와 상수만을 멤버로 가질 수 있다.

    추상 클래스가 "미완성 설계도"라면 인터페이스는 "기본 설계도"라고 생각할 수 있다.

    모든 멤버변수는 public abstract final이어야 하며 생략할 수 있다.
    모든 메서드는 public abstract이어야 하며 생략할 수 있다.

Marker Interface(마커 인터페이스)
    클래스들의 공통그룹명으로, 인터페이스를 생성하고 아무것도 구현하지 않는다.
    즉, 그 클래스들이 같은 그룹으로 묶였다는 표시를 하기 위해 사용한다.

인터페이스 장점 
    개발시간 단축
    표준화 가능
    서로 관계없는 클래스들에게 관계를 맺어줌
    독립적인 프로그래밍 가능

------------------------------------------------------------------------------------
🎁.인터페이스(interface)란?
    - inter(사이의) + face(마주하다)의 합성어
    물체들 사이에서 상호작용 할 수 있도록 하는 매개 역할
    - 클래스가 설계도라면, 인터페이스는 규격

✔.인터페이스의 문법
    멤버
    - 상수 : final 타입 변수명 = 값;
    - 추상 메서드 : abstract 리턴타입 메서드명();

✔.인터페이스의 구현 방법
    interface 인터페이스명 {
      필드
    }

✔.클래스로 인터페이스 구현
    interface 인터페이스명 {}

    class 클래스명 implements 인터페이스명 {
        추상 메서드 구현 // *클래스가 인터페이스에서 만든 추상 메서드를 구현하겠다.
    }

✔.인터페이스 주의할 점
    1. 인터페이스 내 일반 메서드 불가
    2. 인터페이스 내 변수 불가(상수만 가능)
    3. 인터페이스로 객체 생성 불가
    4. 인터페이스 내 멤버 메서드 abstract 키워드 생략 가능
    5. 인터페이스 내 멤버 변수 final 키워드 생략 가능


