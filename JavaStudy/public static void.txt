자바에서 메인 메서드가 public static void인 이유

왜 자바의 메인 메서드는 public static void를 사용할까?

💎. public 
public은 접근제어자다. 어느 클래스에서든 해당 객체를 참조할 수 있다는 뜻이다. JVM이 접근하기 위해서는 public을 사용해야만 한다. 다른 접근 제어자를 사용하면 프로그램이 실행되지 않는다.

💎. static 
static으로 뭔가를 선언하게 되는 경우, 자바가 컴파일되는 시점에 정의된다(클래스 로드). 그리고 static 요소를 non-static 요소에서 호출하는 것은 불가능하다.

static을 붙이는 이유 : main 메서드는 가장 먼저 실행되어야 할 메서드이기 때문이다. main 메서드가 선언되어 있는 클래스는 어딘가에서 선언되어 new 객체로 생성하지 않는다. static으로 선언된 변수나 메서드는 프로그램 로딩 시 먼저 static 메모리에 로딩되니 가정 먼저 수행되어야 하고 어디에서도 호출되지 않는 main 메서드는 당연히 static으로 선언되어야 한다.
(출처 : https://teddyh.tistory.com/15)

💎. void 
타입이 void라는 것은 반환할 것이 없다는 의미이다. 즉, 메인 메서드를 호출하는 JVM에서 반환값을 요구하지 않으니 void 타입을 사용한다.


🎁. Private와 Public의 차이
Private 멤버는 class 외부에서 접근할 수 없는 변수
Public 멤버는 class 외부에서 접근할 수 있는 변수를 의미한다.

🎁. Private 멤버의 장점
자바에서는 클래스 멤버 변수에 직접 접근하는 코드를 막기 위해 Private 기능을 제공한다.

Private 멤버는 외부에서 값을 직접적으로 대입시킬 수 없다.
Private 변수에 값을 대입하기 위해서는 Public으로 제공되는 Set 함수를 사용한다.
Set 함수에서는 Private 멤버에 제약조건을 걸어 예기치 않은 값에 대해 문제를 방지한다.

실습 예시
    class Car{
        private int fuel;

        void setFuel(int inputFuel){
            if(inputFuel>0 && inputFuel<=100){
                this.fuel=inputFuel;
            }
            else{
                System.out.println("fuel값이 올바르지 않습니다.");
            }
        }
        
        int getFuel(){
            return this.fuel;
        }
    }

    public static void main(String[] args){
        Car carObject = new Car();

        carObject.setFuel(10);
        System.out.println(carObject.getFuel()); 10 출력

        carObject.setFuel(-10);
        System.out.println(carObject.getFuel()); fuel값이 올바르지 않습니다. 출력
        
    }

🎁. 캡슐화의 원리
위의 코드에서 Car 클래스에 Private 멤버로 선언하고 값이 올바른지 여부를 클래스 내에서 스스로 확인하는 기능을 적용하였다. 이런 매커니즘을 도입함으로써 잘못된 값이 실수로라도 들어오는 경우를 방지할 수 있다. 이처럼 클래스에 데이터(필드)와 기능(메서드)을 한 곳에 모아둔 다음 보호하고 싶은 멤버에 private를 붙여 접근을 제한하는 기능을 일컬어 캡슐화라고 한다. 참고로 보통의 경우 필드(변수)는 private로, 함수(메서드)는 public으로 지정한다.

(출처 : https://mozi.tistory.com/471)



접근 제어자(Access Modifier)는 말 그대로 접근을 제어하기 위해 사용된다. 여기서 접근이란 클래스 및 인터페이스 그리고 이들이 가지고 있는 멤버의 접근을 말한다.

어떤 경우에도 클래스와 인터페이스를 다른 패키지에서 사용하지 못하도록 막을 필요가 있다. 그리고 객체 생성을 막기 위해 생성자를 호출하지 못하게 하거나 메서드를 사용하지 못하도록 막아야 되는 경우도 있다. 이때 접근 제어자를 사용할 수 있다.

접근 제어자는 public, protected, private와 같이 세 가지의 종류가 있다.
    public : 단어 뜻 그대로 외부 클래스가 자유롭게 사용할 수 있다.
    protected : 같은 패키지 또는 자식 클래스에서 사용할 수 있다.
    private : 단어 뜻 그대로 개인적인 것이라 외부에서 사용될 수 없다.
위 세 가지 접근 제어자가 적용되지 않으면 default 접근 제어를 가진다.
    dafault : 같은 패키지에 소속된 클래스에서만 사용할 수 있다.

💎. 클래스의 접근 제한
클래스를 선언할 때 해당 클래스를 같은 패키지 내에서만 사용할 것인지 아니면 다른 패키지에서도 사용할 수 있도록 할 것인지 결정해야 한다. 클래스는 다음과 같이 public, default 접근 제한을 가진다. 
    dafault 접근 제한
        class 클래스명{}

    public 접근 제한
        public class 클래스명{}

💎. default 접근 제한
클래스를 선언할 때 public을 생략했다면 default 접근 제한을 가진다. 클래스가 default 접근 제한을 가지면 같은 패키지에서는 아무런 제한 없이 사용할 수 있지만 다른 패키지에서는 사용할 수 없도록 제한한다.

💎. public 접근 제한
클래스를 선언할 때 public 접근 제한자를 붙였다면 클래스는 public 접근 제한을 가진다. 클래스가 public 접근 제한을 가지면 같은 패키지뿐만 아니라 다른 패키지에서도 아무런 제한 없이 사용할 수 있다. 클래스를 다른 개발자가 사용할 수 있도록 라이브러리 클래스로 개발한다면 반드시 public 접근 제한을 갖도록 해야 한다. 인터넷으로 배포되는 라이브러리 클래스도 모두 public 접근 제한을 가지고 있다.

💎. 생성자의 접근 제한 
객체를 생성하기 위해서는 new 연산자로 생성자를 호출한다. 하지만 생성자를 어디에서나 호출할 수 있는 것은 아니다. 생성자가 어떤 접근 제한을 갖느냐에 따라 호출 가능 여부가 결정된다. 

생성자는 다음과 같이 public, protected, default, private 접근 제한을 가진다.
public class 클래스명{
    public 클래스명( ){ }
    protected 클래스명( ){ }
    클래스명( ){ }
    private 클래스명( ){ } 
}
클래스에 생성자를 선언하지 않으면 컴파일러에 의해 자동으로 기본 생성자가 추가된다. 자동으로 생성되는 기본 생성자의 접근 제한은 클래스의 접근 제한과 동일하다. 클래스가 default 접근 제한을 가지면 기본 생성자도 default 접근 제한을 가지고, 클래스가 public 접근 제한을 가지면 기본 생성자도 public 접근 제한을 가진다.

🌹.public : 모든 패키지에서 아무런 제한 없이 생성자를 호출할 수 있다.
🌹.protected : default 접근 제한과 마찬가지로 같은 패키지에 속하는 클래스에서 생성자를 호출할 수 있다. 차이점으로는 다른 패키지에 속한 클래스가 해당 클래스의 자식(child) 클래스라면 생성자를 호출할 수 있다.
🌹.default : 같은 패키지에서는 아무런 제한 없이 생성자를 호출할 수 있으나 다른 패키지에서는 생성자를 호출할 수 없다.
🌹.private : 동일한 패키지이건 다른 패키지이건 상관없이 생성자를 호출하지 못하도록 제한한다. 오로지 클래스 내부에서만 생성자를 호출할 수 있고 객체를 만들 수 있다.

💎. 필드와 메서드의 접근 제한
필드와 메서드를 선언할 때 해당 필드와 메서드를 클래스 내부에서만 사용할 것인지 패키지 내에서만 사용할 것인지 아니면 다른 패키지에서도 사용할 수 있도록 할 것인지를 결정해야 한다. 이것은 필드와 메서드가 어떤 접근 제한을 갖느냐에 따라 결정된다. 
    *필드 선언
    [public | protected | private] [static] 리턴타입 필드명;

    *메서드 선언
    [public | protected | private] [static] 리턴타입 메서드명(){ };

✔. 정리
접근 제어자 : 클래스와 인터페이스를 다른 패키지에서 사용하지 못하도록 막을 필요가 있다. 그리고 객체 생성을 막기 위해 생성자를 호출하지 못하게 하거나 필드나 메서드를 사용하지 못하도록 막아야 되는 경우도 있다. 이때 접근 제어자를 사용할 수 있다.

접근 제어자             적용대상                    접근할 수 없는 클래스
public         클래스, 필드, 생성자, 메서드                 없음
protected          필드, 생성자, 메서드      자식 클래스가 아닌 다른 패키지의 클래스
default        클래스, 필드, 생성자, 메서드          다른 패키지에 소속된 클래스가
private            필드, 생성자, 메서드                모든 외부 클래스

(출처 : hongong.hanbit.co.kr)